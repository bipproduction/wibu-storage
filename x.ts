import dotenv from "dotenv";
dotenv.config({ path: "./.env" });
import OpenAI from "openai";

import path from "path";
import fs from "fs/promises";
import AES from "crypto-js/aes";
import Crypto from "crypto-js";

const text =
  "U2FsdGVkX19ocSJBfOvbzIXRYaJM6HSJDjuA94ZxrLDx+ccyCOpvi8DpL7RzWPC0P+BIiLL8F0MhnsqIBvJDE3H6tj4RkNCgdor7WSD0yDs=";
const token = AES.decrypt(text, "makuro").toString(Crypto.enc.Utf8);
const openai = new OpenAI({ apiKey: token });

const root = path.join(process.cwd(), "x_test");

const prompt = `
You are a TypeScript code assistant. Your task is to fix, clean up, and simplify any TypeScript code you receive. Respond only with valid and well-structured TypeScript code as output, without any additional explanation, comments, or markdown formatting.

Steps:
1. Verify if the provided code is valid TypeScript.
2. If the code is valid TypeScript, refactor it by:
   - Fixing any syntax or logical errors.
   - Simplifying the code while ensuring readability, efficiency, and best practices.
   - Improving code structure and organization where necessary.
3. If the code is not TypeScript, respond only with: 'no typescript detected'.If the code is not TypeScript, output only: "no typescript detected".

`;

(async () => {
  const pathFile =
    "/Users/bip/Documents/projects/wibu/wibu-storage/src/app/user/_ui/UserButtonLogout.tsx";
  console.log("read file ...");
  const textFile = await fs.readFile(pathFile, "utf8");
  console.log("analyze ...");
  const completion = await openai.chat.completions.create({
    model: "gpt-4o-mini",
    messages: [
      {
        role: "system",
        content: prompt
      },
      {
        role: "user",
        content: textFile
      }
    ]
  });
  const result = completion.choices[0].message.content;
  if (!result) {
    console.log("no result");
    return;
  }

  let dir = path.dirname(pathFile);
  let name = path.basename(pathFile);
  let ext = path.extname(pathFile);

  const newPath = path.join(dir, `${name.replace(ext, "")}_generated.${ext}`);
  await fs.writeFile(newPath, result + "\n// generated by ai", "utf8");
  console.log("done");
})();

async function completion(system: string, user: string) {
  try {
    const textToken =
      "U2FsdGVkX19ocSJBfOvbzIXRYaJM6HSJDjuA94ZxrLDx+ccyCOpvi8DpL7RzWPC0P+BIiLL8F0MhnsqIBvJDE3H6tj4RkNCgdor7WSD0yDs=";
    const key = "makuro";
    const token = AES.decrypt(textToken, key).toString(Crypto.enc.Utf8);
    const openai = new OpenAI({ apiKey: token });
    const completion = await openai.chat.completions.create({
      model: "gpt-4o-mini",
      messages: [
        {
          role: "system",
          content: system
        },
        {
          role: "user",
          content: user
        }
      ]
    });
    const result = completion.choices[0].message.content;
    if (!result) {
      console.log("no result");
      return null;
    }
    return result;
  } catch (error) {
    console.error(error);
    return null;
  }
}
