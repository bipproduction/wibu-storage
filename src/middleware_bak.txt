import { NextRequest, NextResponse } from "next/server";
import { decrypt } from "./lib/session";

const publicRoutes = ["/auth/signin", "/auth/signup", "/"];
const publicApies = []

export default async function middleware(req: NextRequest) {
  const { pathname } = req.nextUrl;
  const isPublicRoute = publicRoutes.includes(pathname);
  const cookie = req.cookies.get("ws_token")?.value;

  if (!cookie) {
    if (!isPublicRoute) {
      return NextResponse.redirect(new URL("/auth/signin", req.nextUrl));
    }
    return NextResponse.next();
  }

  const session = await decrypt(cookie);
  const user = session?.user ? JSON.parse(session.user as string) : null;

  if (!user) {
    if (!isPublicRoute) {
      return NextResponse.redirect(new URL("/auth/signin", req.nextUrl));
    }
  } else {
    if (isPublicRoute || !pathname.startsWith(`/user`)) {
      return NextResponse.redirect(new URL(`/user`, req.nextUrl));
    }
  }

  return NextResponse.next();
}

export const config = {
  matcher: ["/((?!api|_next/static|_next/image|.*\\.png$).*)"],
};
