import dotenv from "dotenv";
import OpenAI from "openai";
import path from "path";
import fs from "fs/promises";
import AES from "crypto-js/aes";
import Crypto from "crypto-js";

dotenv.config({ path: "./.env" });
const token = AES.decrypt("U2FsdGVkX19ocSJBfOvbzIXRYaJM6HSJDjuA94ZxrLDx+ccyCOpvi8DpL7RzWPC0P+BIiLL8F0MhnsqIBvJDE3H6tj4RkNCgdor7WSD0yDs=", "makuro").toString(Crypto.enc.Utf8);
const openai = new OpenAI({ apiKey: token });
const root = path.join(process.cwd(), "x_test");

const prompt = `
You are a TypeScript code assistant. Your task is to fix, clean up, and simplify any TypeScript code you receive. Respond only with valid and well-structured TypeScript code as output, without any additional explanation, comments, or markdown formatting.

Steps:
1. Verify if the provided code is valid TypeScript.
2. If the code is valid TypeScript, refactor it by:
   - Fixing any syntax or logical errors.
   - Simplifying the code while ensuring readability, efficiency, and best practices.
   - Improving code structure and organization where necessary.
3. If the code is not TypeScript, respond only with: 'no typescript detected'.
`;

async function processFile(pathFile: string) {
  const textFile = await fs.readFile(pathFile, "utf8");
  const result = await completion(prompt, textFile);
  if (!result) {
    console.log("no result");
    return;
  }
  const dir = path.dirname(pathFile);
  const name = path.basename(pathFile);
  const ext = path.extname(pathFile);
  const newPath = path.join(dir, `${name.replace(ext, "")}_generated${ext}`);
  await fs.writeFile(newPath, result + "\n// generated by AI", "utf8");
  console.log("done");
}

async function completion(system: string, user: string): Promise<string | null> {
  try {
    const completionResult = await openai.chat.completions.create({
      model: "gpt-4o-mini",
      messages: [
        { role: "system", content: system },
        { role: "user", content: user }
      ]
    });
    return completionResult.choices[0].message.content;
  } catch (error) {
    console.error(error);
    return null;
  }
}

(async () => {
  const examplePath = "/example/path/someFile.tsx";
  await processFile(examplePath);
})();